name: 'publish'

on:
  push:
    branches:
      - main

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: yarn

      - name: get version from package.json
        id: vars
        run: |
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            echo "VERSION=$(powershell -Command \"(Get-Content package.json | ConvertFrom-Json).version\")" >> $env:GITHUB_ENV
          else
            VERSION=$(jq -r .version < package.json)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi
        shell: bash

      - name: build Tauri app
        run: yarn tauri build ${{ matrix.args }}

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-${{ matrix.platform }}-${{ matrix.args }}
          path: |
            src-tauri/target/release/bundle/macos/*.app
            src-tauri/target/release/bundle/msi/*.exe

  release:
    needs: build-tauri
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ env.VERSION }}
          release_name: 'App v${{ env.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

      - name: upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/**/*.exe
          asset_name: app-v${{ env.VERSION }}-win.exe
          asset_content_type: application/octet-stream

      - name: upload macOS release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/**/*.app
          asset_name: app-v${{ env.VERSION }}-macos.app
          asset_content_type: application/octet-stream
